# Parser.ts null return fixes

## parseStatement (line 239)
OLD: return null;
NEW: return ParseError.parseFailure('statement', lexemes, 0);

## parseHashPair (line 1391)
OLD: return null;
NEW: return ParseError.missingToken('=>', lexemes[arrowPos]?.token, 'in hash pair');

## parseDoBlock (lines 1954, 1959)
OLD: return null;
NEW: return ParseError.invalidSyntax('Invalid do block syntax', lexemes[0].token);

## parseSubDeclaration (lines 2022, 2085, 2091)
OLD: return null;
NEW: return ParseError.incompleteDeclaration('subroutine', 'body or parameter list', lexemes[pos-1]?.token);

## parseParameter (lines 2115, 2122)
OLD: return null;
NEW: return ParseError.invalidSyntax('Invalid parameter syntax', lexemes[0]?.token);

## parseBlockStatement (line 2157)
OLD: return null;
NEW: return ParseError.missingToken('{', lexemes[0]?.token, 'for block statement');

## Control flow statements (If/Unless/While/Until/Foreach)
OLD: return null; (for missing LPAREN)
NEW: return ParseError.missingToken('(', lexemes[pos]?.token, `after ${keyword} keyword`);

OLD: return null; (for missing block)
NEW: return ParseError.missingToken('{', lexemes[pos]?.token, `for ${keyword} statement body`);

## parseBlock (line 2481)
OLD: return null;
NEW: return { statements: [], nextPos: startPos };  // Or error if required

## parsePackageDeclaration/parseUseStatement
OLD: return null;
NEW: return ParseError.incompleteDeclaration('package/use', 'module name', lexemes[pos]?.token);

## parseClassDeclaration
OLD: return null;
NEW: return ParseError.incompleteDeclaration('class', 'class name or body', lexemes[pos]?.token);

## parseClassBodyStatement/parseFieldDeclaration/parseMethodDeclaration
OLD: return null;
NEW: return ParseError.invalidSyntax('Invalid class member syntax', lexemes[0]?.token);