# Basic match/case structure (experimental)
use feature 'switch';

match ($value) {
    case (1) {
        print("one");
    }
    case (2) {
        print("two");
    }
    case (3) {
        print("three");
    }
    else {
        print("other");
    }
}

# Match with patterns
match ($string) {
    case (/^\d+$/) {
        print("all digits");
    }
    case (/^[a-z]+$/) {
        print("all lowercase");
    }
    case (/^[A-Z]+$/) {
        print("all uppercase");
    }
    else {
        print("mixed");
    }
}

# Match with multiple values
match ($day) {
    case (1..5) {
        print("weekday");
    }
    case (6, 7) {
        print("weekend");
    }
}

# Match with conditions
match ($score) {
    case ($_ > 90) {
        print("A");
    }
    case ($_ > 80) {
        print("B");
    }
    case ($_ > 70) {
        print("C");
    }
    else {
        print("F");
    }
}

# Nested match
match ($type) {
    case ("number") {
        match ($value) {
            case ($_ < 0) {
                print("negative");
            }
            case ($_ > 0) {
                print("positive");
            }
            else {
                print("zero");
            }
        }
    }
    case ("string") {
        process_string($value);
    }
}

# Match in expression context
my $result = match ($code) {
    case (200) { "success" }
    case (404) { "not found" }
    case (500) { "server error" }
    else { "unknown" }
};

# Match with complex patterns
match ($input) {
    case ([1, 2, 3]) {
        handle_low();
    }
    case ([4, 5, 6]) {
        handle_mid();
    }
    case ([7, 8, 9]) {
        handle_high();
    }
    case (0) {
        handle_zero();
    }
}